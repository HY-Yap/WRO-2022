'RUN ONLY WHEN ON FULL BATTERY

Sensor.SetMode(2, 4) 'left light sensor NXT - RGB
Sensor.SetMode(1, 4)  'right light sensor NXT - RGB
Sensor.SetMode(4, 4) 'line tracking sensor  - RGB
Sensor.SetMode(3, 0) 'gyro


'Variables to be initialised

targetAngle = 0
startAngle = 0

thres = 250
lastError = 0

baseSpeed = 30

extra = 0
stopped = 0

'##############################################################


'Invert motors

Motor.Invert("B") 'left motor
'right motor is C, no need to invert

'##############################################################


'Functions

Sub gError 'calculate new currentAngle, diffAngle and error
  currentAngle = Sensor.ReadRawValue(3,0) 'current angle = gyro value
  diffAngle = currentAngle - startAngle
  error = targetAngle - diffAngle
EndSub

Sub pTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub LpTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,0)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub RpTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",0,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub gForward 'before using this function, define startAngle and baseSpeed
  integral = 0
  lastError = 0
  gError()
  integral = error + integral
  derivative = error - lastError
  lastError = error
  speed =  (error * 0.35) + (derivative * 0.5)
  Motor.StartSync("BC",baseSpeed+speed,baseSpeed-speed)
  gError()
EndSub

Sub readVal
  rawValue = Sensor.ReadRaw(4,3) 'read RGB values of the floor
  rawValueL = Sensor.ReadRaw(2,3) 'read RGB values of left
  rawValueR = Sensor.ReadRaw(1,3) 'read RGB values of right
  lightVal[0] = rawValue[0] + rawValue[1] + rawValue[2]
  lightVal[3] = rawValue[1]
  lightVal[1] = rawValueL[0] + rawValueL[1] + rawValueL[2]
  lightVal[2] = rawValueR[0] + rawValueR[1] + rawValueR[2]
EndSub

Sub readCol
    LCD.StopUpdate()
    LCD.Clear()
    readVal()
    LCD.Text(1,1,1,2,rawValueR[0]) 'R of right
    LCD.Text(1,60,1,2,rawValueR[1]) 'G of right
    LCD.Text(1,120,1,2,rawValueR[2]) 'B of right
    LCD.Update()
    Program.Delay(100)
    If rawValueR[0] > 20 And rawValueR[2] > 20 Then
        Speaker.Note(100,"C4",200) 'white
        colDetected = "white"
    ElseIf rawValueR[0] > 30 And rawValueR[3] < 10 Then
        Speaker.Note(100,"D4",200) 'red
        colDetected = "red"
    ElseIf (rawValueR[1] > 4 And rawValueR[2] <= 3) Then
        Speaker.Note(100,"E4",200) 'black
        colDetected = "black"
    Else 
        colDetected = "none"
    EndIf
EndSub


Sub pTrack 'before using this function, define baseSpeed
  error = lightVal[0] - thres
  derivative = error - lastError
  speed =  error * 0.02 + derivative * 1
  Motor.StartSync("BC",Math.Max(Math.Min((baseSpeed + speed),100),-100),Math.Max(Math.Min((baseSpeed - speed),100),-100))
  lastError = error
EndSub


'##############################################################


'Code

Program.Delay(1000)
startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value
Motor.MoveSync("BC",100,95,1080,"True") 'move forward 3 rotations

LCD.Clear()
readVal()
While lightVal[0] > 90
 Motor.StartSync("BC",40,60)
 readVal()
EndWhile
Motor.Stop("BC","True") 'stop when a black horizontal line is detected

Motor.MoveSync("BC",-10,50,260,"False")
' targetAngle = -90
' pTurn()
Motor.Start("BC",-20) 'wall bang
Program.Delay(1000) 'pause
Motor.Stop("BC","True") 'stop

'move forward a bit
Motor.MoveSync("BC",20,20,20,"True")

Motor.Start("BC",-5) 'wall bang 2
Program.Delay(1000)
Motor.Stop("BC","True")

startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value
Speaker.Tone(100,1000,500)
Program.Delay(500)
targetAngle = 80
LpTurn() 'turn 80 degrees
Speaker.Tone(100,1000,1000)
Program.Delay(1000)


baseSpeed = 20
readVal()
While (lightVal[0] < 122 Or lightVal[0] > 133) And (lightVal[3] < 50 Or lightVal[3] > 60) 'line track until senses blue 
  readVal()
  pTrack()
EndWhile
Motor.Stop("BC","True")
Speaker.Tone(100,1000,1000) 'beep when line track function ends
Program.Delay(1000)



' While "True"
'   gForward()
'   diffRotation = Motor.GetCount("B") - startRotation
'   LCD.StopUpdate()
'   LCD.Clear()
'   LCD.Text(1,1,1,2,diffRotation)
'   LCD.Update()
' EndWhile


' Motor.Move("B",10,60,"False")

startRotation = Motor.GetCount("B")
baseSpeed = 10
targetAngle = 88  'as the startAngle is still -90 deg
count = 0
While startRotation - extra + 1270 > Motor.GetCount("B") 'if haven't hit wall yet
  readCol()
  If colDetected = "none" Then 'if nothing is detected
    readVal()
    gForward()  
  Else 'if something is detected
    readCol()
    LCD.Text(1,0,count,2,"Object")
    LCD.Update()
    count = count + 20
    Motor.MoveSync("BC",5,5,80,"True") 'move a bit after scanning
    'extra = extra + 90 'theoretically should be 90 
  EndIf
EndWhile



