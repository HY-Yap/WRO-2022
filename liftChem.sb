'RUN ONLY WHEN ON FULL BATTERY
'RESET GYRO BEFORE EACH RUN

Sensor.SetMode(2, 4) 'left light sensor NXT - RGB
Sensor.SetMode(1, 4)  'right light sensor NXT - RGB
Sensor.SetMode(4, 4) 'line tracking sensor  - RGB
Sensor.SetMode(3, 0) 'gyro


'Variables to be initialised

targetAngle = 0
startAngle = 0

thres = 250
lastError = 0

baseSpeed = 30

extra = 0
stopped = 0

blue1 = 0
blue2 = 0
green1 = 0
green2 = 0
yellow1 = 0
yellow2 = 0
red1 = 0
red2 = 0
brown1 = 0
brown2 = 0
white1 = 0
white2 = 0

white = 0
black = 0
red = 0
none = 0

chemPos = 0

'##############################################################


'Invert motors

Motor.Invert("B") 'left motor
'right motor is C, no need to invert

'##############################################################


'Functions

Sub gError 'calculate new currentAngle, diffAngle and error
  currentAngle = Sensor.ReadRawValue(3,0) 'current angle = gyro value
  diffAngle = currentAngle - startAngle
  error = targetAngle - diffAngle
EndSub

Sub pTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub LpTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,0)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub RpTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",0,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub encdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*32.5)*25.6
  startrotations = Motor.GetCount("B")
  currentrotations = Motor.GetCount("B") - startrotations
  error = targetrotations - currentrotations
  While error > 2 Or error < -2
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1) 
    Motor.Start("B", speed)
    Motor.Start("C", -speed)
    currentrotations = Motor.GetCount("B") - startrotations
    EndWhile
    Motor.Stop("BC","True")
EndSub  

Sub Lencdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*32.5*2)*25.6
  startrotations = Motor.GetCount("B")
  currentrotations = Motor.GetCount("B") - startrotations
  error = targetrotations - currentrotations
  While error > 2 Or error < -2
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.StartSync("BC", speed,0)
    currentrotations = Motor.GetCount("B") - startrotations
    EndWhile
    Motor.Stop("BC","True")
EndSub  

Sub Rencdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*31.75*2)*25.6
  startrotations = Motor.GetCount("C")
  currentrotations = -(Motor.GetCount("C") - startrotations)
  error = targetrotations - currentrotations
  While error > 2 Or error < -2
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.StartSync("BC", 0,-speed)
    currentrotations = -(Motor.GetCount("C") - startrotations)
    EndWhile
    Motor.Stop("BC","True")
EndSub      

Sub liftChem
  chemStartRot = Motor.GetCount("B")
  If chemPos = 0 Then
    targetangle = 50
    Rencdturn()
    Motor.Move("A",100,130,"True") 'lower claw
    Motor.MoveSync("BC",20,20,140,"True") 'approach chemical
    Motor.Move("A",-10,95,"True") 'pick up chemical
    Motor.MoveSync("BC",-20,-20,140,"True") 'move back
    targetangle = - 50
    Rencdturn()
    Motor.Stop("BC","True")
  ElseIf chemPos = 1 Then
    targetangle = -50
    Lencdturn()
    Motor.Move("A",100,130,"True") 'lower claw
    Motor.MoveSync("BC",20,20,140,"True") 'approach chemical
    Motor.Move("A",-10,95,"True") 'pick up chemical
    Motor.MoveSync("BC",-20,-20,140,"True") 'move back
    targetangle = 50
    Lencdturn()
    Motor.Stop("BC","True")
  EndIf
  Extra = Extra + (chemStartRot - Motor.GetCount("B"))
  pickupChem = 1
EndSub


'##############################################################


'Code

targetangle = 0
chemPos = 0
liftChem()