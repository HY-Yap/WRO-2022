'RUN ONLY WHEN ON FULL BATTERY
'RESET GYRO BEFORE EACH RUN

Sensor.SetMode(2, 4) 'left light sensor NXT - RGB
Sensor.SetMode(1, 4)  'right light sensor NXT - RGB
Sensor.SetMode(4, 4) 'line tracking sensor  - RGB
Sensor.SetMode(3, 0) 'gyro


'Variables to be initialised

targetAngle = 0
startAngle = 0

thres = 250
lastError = 0

baseSpeed = 30

extra = 0
stopped = 0

markBlue = 0
markGreen = 0
markYellow = 0
markRed = 0
markBrown = 0
markWhite = 0

white = 0
black = 0
red = 0
none = 0

chemPos = 0

'##############################################################


'Invert motors

Motor.Invert("B") 'left motor
'right motor is C, no need to invert

'##############################################################


'Functions

Sub encdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*32.5)*25.6
  startrotations = Motor.GetCount("B")
  currentrotations = Motor.GetCount("B") - startrotations
  error = targetrotations - currentrotations
  While error > 1 Or error < -1
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.Start("B", speed)
    Motor.Start("C", -speed)
    currentrotations = Motor.GetCount("B") - startrotations
    EndWhile
    Motor.Stop("BC","True")
EndSub  

Sub Lencdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*32.5*2)*25.6
  startrotations = Motor.GetCount("B")
  currentrotations = Motor.GetCount("B") - startrotations
  error = targetrotations - currentrotations
  While error > 1 Or error < -1
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.StartSync("BC", speed,0)
    currentrotations = Motor.GetCount("B") - startrotations
    EndWhile
    Motor.Stop("BC","True")
EndSub  

Sub Rencdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*31.75*2)*25.6
  startrotations = Motor.GetCount("C")
  currentrotations = -(Motor.GetCount("C") - startrotations)
  error = targetrotations - currentrotations
  While error > 1 Or error < -1
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.StartSync("BC", 0,-speed)
    currentrotations = -(Motor.GetCount("C") - startrotations)
    EndWhile
    Motor.Stop("BC","True")
EndSub     

Sub gError 'calculate new currentAngle, diffAngle and error
  currentAngle = Sensor.ReadRawValue(3,0) 'current angle = gyro value
  diffAngle = currentAngle - startAngle
  error = targetAngle - diffAngle
EndSub

Sub pTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub LpTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,0)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub RpTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",0,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub gForward 'before using this function, define startAngle and baseSpeed
  integral = 0
  lastError = 0
  gError()
  integral = error + integral
  derivative = error - lastError
  lastError = error
  speed =  (error * 0.35) + (derivative * 0.5)
  Motor.StartSync("BC",baseSpeed+speed,baseSpeed-speed)
  gError()
EndSub

Sub readVal
  rawValue = Sensor.ReadRaw(4,3) 'read RGB values of the floor
  rawValueL = Sensor.ReadRaw(2,3) 'read RGB values of left
  rawValueR = Sensor.ReadRaw(1,3) 'read RGB values of right
  lightVal[0] = rawValue[0] + rawValue[1] + rawValue[2]
  lightVal[3] = rawValue[1]
  lightVal[1] = rawValueL[0] + rawValueL[1] + rawValueL[2]
  lightVal[2] = rawValueR[0] + rawValueR[1] + rawValueR[2]
  If (rawValue[0] + rawValue[1] + rawValue[2]) <> 0 Then
    R_floor = ( rawValue[0] / (rawValue[0] + rawValue[1] + rawValue[2]) )*100
    G_floor = ( rawValue[1] / (rawValue[0] + rawValue[1] + rawValue[2]) )*100
    B_floor = ( rawValue[2] / (rawValue[0] + rawValue[1] + rawValue[2]) )*100
  Else
    R_floor = 0
    G_floor = 0
    B_floor = 0
  EndIf
  If (rawValueL[0] + rawValueL[1] + rawValueL[2]) <> 0 Then
    R_left = ( rawValueL[0] / (rawValueL[0] + rawValueL[1] + rawValueL[2]) )*100
    G_left = ( rawValueL[1] / (rawValueL[0] + rawValueL[1] + rawValueL[2]) )*100
    B_left = ( rawValueL[2] / (rawValueL[0] + rawValueL[1] + rawValueL[2]) )*100
  Else
    R_left = 0
    G_left = 0
    B_left = 0
  EndIf
  If (rawValueR[0] + rawValueR[1] + rawValueR[2]) <> 0 Then
    R_right = ( rawValueR[0] / (rawValueR[0] + rawValueR[1] + rawValueR[2]) )*100
    G_right = ( rawValueR[1] / (rawValueR[0] + rawValueR[1] + rawValueR[2]) )*100
    B_right = ( rawValueR[2] / (rawValueR[0] + rawValueR[1] + rawValueR[2]) )*100
  Else
    R_right = 0
    G_right = 0
    B_right = 0
    EndIf
EndSub


Sub liftChem
  chemStartRot = Motor.GetCount("B")
  If chemPos = 0 Then
    targetAngle = targetAngle + 50
    RpTurn()
    Motor.Move("A",100,130,"True") 'lower claw
    Motor.MoveSync("BC",20,20,130,"True") 'approach chemical
    Motor.Move("A",-10,95,"True") 'pick up chemical
    Motor.MoveSync("BC",-20,-20,130,"True") 'move back
    targetAngle = targetAngle - 50
    RpTurn()
    Motor.Stop("BC","True")
  ElseIf chemPos = 1 Then
    targetAngle = targetAngle -50
    LpTurn()
    Motor.Move("A",100,130,"True") 'lower claw
    Motor.MoveSync("BC",20,20,130,"True") 'approach chemical
    Motor.Move("A",-10,95,"True") 'pick up chemical
    Motor.MoveSync("BC",-20,-20,130,"True") 'move back
    targetAngle = targetAngle + 50
    LpTurn()
    Motor.Stop("BC","True")
  EndIf
  Extra = Extra + (chemStartRot - Motor.GetCount("B"))
EndSub

Sub pTrack 'before using this function, define baseSpeed
  error = lightVal[0] - thres
  derivative = error - lastError
  speed =  error * 0.02 + derivative * 1
  Motor.StartSync("BC",Math.Max(Math.Min((baseSpeed + speed),100),-100),Math.Max(Math.Min((baseSpeed - speed),100),-100))
  lastError = error
EndSub


'##############################################################


'Code

startRotation = Motor.GetCount("B")
baseSpeed = 20

Motor.MoveSync("BC",20,20,155,"True")

startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value
targetAngle = 88
LpTurn()
Motor.Stop("BC","True")

Motor.StartSync("BC",-20,-20) 'wall bang
Program.Delay(1000)
Motor.Stop("BC","True")
startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value

Motor.MoveSync("BC",20,20,340,"True")
Motor.Move("A",40,135,"True") 'grab block 1

Motor.MoveSync("BC",20,20,390,"True")
Motor.Stop("BC","True")
Program.Delay(500)


Motor.Start("A",1) 'grab block 2
Motor.Move("BC",5,30,100)

Program.Delay(1000)
Motor.Stop("A", "True")

markGreen = 1
markBrown = 1


If markBrown = 1 Then
    Motor.MoveSync("BC",20,0,800,"True")
    Motor.Stop("A","True")
    Motor.MoveSync("BC",20,20,150,"True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC",-20,-20,150,"True")
    Motor.MoveSync("BC",-20,0,800,"True")
    markBrown = 0
ElseIf markWhite = 1 Then 
  Motor.MoveSync("BC",20,0,670,"True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC",-20,0,670,"True")
    markWhite = 0
ElseIf markBlue = 1 Then
    Motor.MoveSync("BC",20,0,520,"True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC",-20,0,520,"True")
    markBlue = 0
ElseIf markGreen = 1 Then 
    Motor.MoveSync("BC", -20, -20, 100, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC", -20, 0, 260, "True") 
    Motor.MoveSync("BC", 20, 20, 100, "True")   
    markGreen = 0
ElseIf markYellow = 1 Then 
    Motor.MoveSync("BC", -20, -20, 300, "True")   
    Motor.MoveSync("BC", 20, 0, 240, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,20,"True")
    Motor.MoveSync("BC", -20, 0, 240, "True") 
    Motor.MoveSync("BC", 20, 20, 300, "True")   
    markYellow = 0
EndIf

If markBlue = 1 Then
    Motor.MoveSync("BC",20,0,550,"True")
    Motor.MoveSync("BC", 10, 10, 50, "True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC", -10, -10, 50, "True")
    Motor.MoveSync("BC",-20,0,550,"True")
    markBlue = 0
ElseIf markRed = 1 Then
    Motor.MoveSync("BC", -20, -20, 500, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,130,"True")
    Motor.MoveSync("BC", -20, 0, 260, "True") 
    markRed = 0
ElseIf markWhite = 1 Then 
    Motor.MoveSync("BC",20,0,800,"True")
    Motor.Stop("A","True")
    Motor.MoveSync("BC",20,20,150,"True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC",-20,-20,150,"True")
    Motor.MoveSync("BC",-20,0,800,"True")
    markBrown = 0
ElseIf markBrown = 1 Then
    Motor.MoveSync("BC",20,0,670,"True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC",-20,0,670,"True")
    markWhite = 0
ElseIf markGreen = 1 Then 
    Motor.MoveSync("BC", -20, -20, 100, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC", -20, 0, 260, "True")   
    markGreen = 0
ElseIf markYellow = 1 Then 
    Motor.MoveSync("BC", -20, -20, 300, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,130,"True")
    Motor.MoveSync("BC", -20, 0, 260, "True")   
    markYellow = 0

EndIf

Motor.StartSync("BC",-25,-25) 'wall bang
Program.Delay(2000)
Motor.Stop("BC","True")

Motor.MoveSync("BC",50,50,100,"True") 'move out a bit

Motor.Start("A", -5)

targetangle = 125
encdturn()
Motor.StartSync("BC",40,40)
Program.Delay(2000)
Motor.Stop("BC","True")