'RUN ONLY WHEN ON FULL BATTERY
'RESET GYRO BEFORE EACH RUN
'WARNING: LPTURN TENDS TO FK UP DURING THE ACTUAL RUN HENCE USE ENCDTURN

'circumference of wheel = 25.6
'circumference of bot = 56.5

Sensor.SetMode(2, 4) 'left light sensor NXT - RGB
Sensor.SetMode(1, 4)  'right light sensor NXT - RGB
Sensor.SetMode(4, 4) 'line tracking sensor  - RGB
Sensor.SetMode(3, 0) 'gyro


'Variables to be initialised

dispenseCount = 0 
dispenseNow = 0

pickupChem = 0

targetAngle = 0
startAngle = 0

thres = 250
lastError = 0

baseSpeed = 30

extra = 0
stopped = 0

markBlue = 0
markGreen = 0
markYellow = 0
markRed = 0
markBrown = 0
markWhite = 0

white = 0
black = 0
red = 0
none = 0

chemPos = 0

'##############################################################


'Invert motors

Motor.Invert("B") 'left motor
'right motor is C, no need to invert

'##############################################################


'Functions

Sub dispenseWater
    If dispenseNow = 1 Then 'if water should dispense NOW
        If dispenseCount = 0 Then 'if nothing has been dropped yet
            Motor.Move("D",50,110,"True") 'dispense first block
            Program.Delay(500) 'wait for block to drop
            Motor.Start("D",-7) 'reset dispenser
            Program.Delay(1000)
            Motor.Stop("D","True")
            dispenseCount = 1
            dispenseNow = 0
        ElseIf dispenseCount = 1 Then 'if first water has already been dispensed
            Motor.Move("D",50,200,"True")
        EndIf
    ElseIf dispenseNow = 2 Then 'if water should be dispensed LATER
        dispenseNow = 1
    EndIf
EndSub 

Sub encdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*32.5)*25.6
  startrotations = Motor.GetCount("B")
  currentrotations = Motor.GetCount("B") - startrotations
  error = targetrotations - currentrotations
  While error > 1 Or error < -1
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.Start("B", speed)
    Motor.Start("C", -speed)
    currentrotations = Motor.GetCount("B") - startrotations
    EndWhile
    Motor.Stop("BC","True")
EndSub  

Sub Lencdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*32.5*2)*25.6
  startrotations = Motor.GetCount("B")
  currentrotations = Motor.GetCount("B") - startrotations
  error = targetrotations - currentrotations
  While error > 1 Or error < -1
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.StartSync("BC", speed,0)
    currentrotations = Motor.GetCount("B") - startrotations
    EndWhile
    Motor.Stop("BC","True")
EndSub  

Sub Rencdturn
  derivative = 0
  integral = 0
  lastError = 0
  targetrotations = ((targetangle/360)*31.75*2)*25.6
  startrotations = Motor.GetCount("C")
  currentrotations = -(Motor.GetCount("C") - startrotations)
  error = targetrotations - currentrotations
  While error > 1 Or error < -1
    error = targetrotations - currentrotations
    integral = error + integral
    derivative = error - lastError
    lastError = error
    speed =  (error * 0.75) + (integral * 0.00025) + (derivative * 1)
    Motor.StartSync("BC", 0,-speed)
    currentrotations = -(Motor.GetCount("C") - startrotations)
    EndWhile
    Motor.Stop("BC","True")
EndSub     

Sub gError 'calculate new currentAngle, diffAngle and error
  currentAngle = Sensor.ReadRawValue(3,0) 'current angle = gyro value
  diffAngle = currentAngle - startAngle
  error = targetAngle - diffAngle
EndSub

Sub pTurn 'before using this function, define startAngle & targetAngle
  derivative = 0
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub LpTurn 'before using this function, define startAngle & targetAngle
  integral = 0
  derivative = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",speed,0)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub RpTurn 'before using this function, define startAngle & targetAngle
  derivative = 0
  integral = 0
  lastError = 0
  gError()
  While diffAngle <> targetAngle 'or error <> 0 (they mean the same thing)
      integral = error + integral
      derivative = error - lastError
      lastError = error
      speed =  (error * 0.45) + (integral * 0.0005) + (derivative * 1)
      Motor.StartSync("BC",0,-speed)
      gError()
  EndWhile
  Motor.Stop("BC","True")
EndSub

Sub gForward 'before using this function, define startAngle and baseSpeed
  integral = 0
  lastError = 0
  gError()
  integral = error + integral
  derivative = error - lastError
  lastError = error
  speed =  (error * 0.35) + (derivative * 0.5)
  Motor.StartSync("BC",baseSpeed+speed,baseSpeed-speed)
  gError()
EndSub

Sub readVal
  rawValue = Sensor.ReadRaw(4,3) 'read RGB values of the floor
  rawValueL = Sensor.ReadRaw(2,3) 'read RGB values of left
  rawValueR = Sensor.ReadRaw(1,3) 'read RGB values of right
  lightVal[0] = rawValue[0] + rawValue[1] + rawValue[2]
  lightVal[3] = rawValue[1]
  lightVal[1] = rawValueL[0] + rawValueL[1] + rawValueL[2]
  lightVal[2] = rawValueR[0] + rawValueR[1] + rawValueR[2]
  If (rawValue[0] + rawValue[1] + rawValue[2]) <> 0 Then
    R_floor = ( rawValue[0] / (rawValue[0] + rawValue[1] + rawValue[2]) )*100
    G_floor = ( rawValue[1] / (rawValue[0] + rawValue[1] + rawValue[2]) )*100
    B_floor = ( rawValue[2] / (rawValue[0] + rawValue[1] + rawValue[2]) )*100
  Else
    R_floor = 0
    G_floor = 0
    B_floor = 0
  EndIf
  If (rawValueL[0] + rawValueL[1] + rawValueL[2]) <> 0 Then
    R_left = ( rawValueL[0] / (rawValueL[0] + rawValueL[1] + rawValueL[2]) )*100
    G_left = ( rawValueL[1] / (rawValueL[0] + rawValueL[1] + rawValueL[2]) )*100
    B_left = ( rawValueL[2] / (rawValueL[0] + rawValueL[1] + rawValueL[2]) )*100
  Else
    R_left = 0
    G_left = 0
    B_left = 0
  EndIf
  If (rawValueR[0] + rawValueR[1] + rawValueR[2]) <> 0 Then
    R_right = ( rawValueR[0] / (rawValueR[0] + rawValueR[1] + rawValueR[2]) )*100
    G_right = ( rawValueR[1] / (rawValueR[0] + rawValueR[1] + rawValueR[2]) )*100
    B_right = ( rawValueR[2] / (rawValueR[0] + rawValueR[1] + rawValueR[2]) )*100
  Else
    R_right = 0
    G_right = 0
    B_right = 0
    EndIf
EndSub


Sub readCol_right
  Program.Delay(500)
  colDetected = "e"
  white = 0
  red = 0
  black = 0
  none = 0
  For i = 1 To 100
      readVal()
      If R_right > 35 And R_right < 40 And G_right > 31 And G_right < 37 And B_right > 25 And B_right < 33 Then
            white = white + 1
      ElseIf R_right > 65 And R_right < 81 And G_right > 10 And G_right < 31 And B_right > 5 And B_right < 16 Then
          red = red + 1
      Else 
          none = none + 1
      EndIf
  EndFor
  If white > none And white > red And white > black Then
    Speaker.Note(50,"C4",200) 'white
    colDetected = "white"
  ElseIf red > white And red > black And red > none Then
    Speaker.Note(50,"D4",200) 'red
    colDetected = "red"
    dispenseWater()
  Else
    Speaker.Note(50,"F4",200) 'none
    colDetected = "none"
  EndIf
EndSub

Sub readCol_left
  Program.Delay(500)
  colDetected = "e"
  white = 0
  red = 0
  black = 0
  none = 0
  For i = 1 To 100
    readVal()
    If R_left > 65 And R_left < 81 And G_left > 10 And G_left < 31 and B_left > -1 and B_left < 16 Then
      red = red + 1
    ElseIf (R_left = 0 Or R_left = (100/3) Or R_left = 100 Or R_left = 60 Or R_left = 50 Or (rawValueL[0] > -1 And rawValueL[0] < 4) ) And (G_left = 0 Or G_left = (100/3) Or G_left = 100 Or G_left = 60 Or G_left = 50 Or (rawValueL[1] > -1 And rawValueL[1] < 4) ) And (B_left = 0 Or B_left = (100/3) Or B_left = 100 Or B_left = 60 Or B_left = 50 Or (rawValueL[2] > -1 And rawValueL[2] < 4) ) Then
      none = none + 1
    Else 
      white = white + 1
    EndIf
  EndFor
  If white > none And white > red And white > black Then
    Speaker.Note(50,"C4",200) 'white
    colDetected = "white"
  ElseIf red > white And red > black And red > none Then
    Speaker.Note(50,"D4",200) 'red
    colDetected = "red"
    dispenseWater()
  Else
    Speaker.Note(50,"F4",200) 'none
    colDetected = "none"
  EndIf
EndSub


Sub pTrack 'before using this function, define baseSpeed
  error = lightVal[0] - thres
  derivative = error - lastError
  speed =  error * 0.02 + derivative * 1
  Motor.StartSync("BC",Math.Max(Math.Min((baseSpeed + speed),100),-100),Math.Max(Math.Min((baseSpeed - speed),100),-100))
  lastError = error
EndSub


'##############################################################


'Code

Program.Delay(1000)

startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value
targetAngle = startAngle
baseSpeed = -50
While -1400 < Motor.GetCount("B")
  gForward()
EndWhile
Motor.Stop("BC","True")

LCD.Clear()
readVal()
baseSpeed = -20
While lightVal[0] > 90
' Motor.StartSync("BC",-25,-30)
  gForward()
 readVal()
EndWhile
Motor.Stop("BC","True") 'stop when a black horizontal line is detected
' Program.Delay(500)
' Motor.Move("BC",10,80,"True")
Motor.Stop("BC","True")
Program.Delay(500)

' Motor.MoveSync("BC",-10,50,260,"False")
targetangle = 100
encdturn()
Motor.Start("BC",-20) 'wall bang
Program.Delay(2000) 'pause
Motor.Stop("BC","True") 'stop

' 'move forward a bit
' Motor.MoveSync("BC",20,20,20,"True")

' Motor.Start("BC",-5) 'wall bang 2
' Program.Delay(1000)
' Motor.Stop("BC","True")

startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value
Speaker.Tone(100,1000,500)
Program.Delay(500)
targetangle = 85
Lencdturn() 'turn 85 degrees
Speaker.Tone(100,1000,1000)
Program.Delay(1000)


baseSpeed = 20
readVal()
While (lightVal[0] < 122 Or lightVal[0] > 133) And (lightVal[3] < 50 Or lightVal[3] > 60) 'line track until senses blue 
  readVal()
  pTrack()
EndWhile
Motor.Stop("BC","True")
Speaker.Tone(100,1000,1000) 'beep when line track function ends
Program.Delay(1000)


startRotation = Motor.GetCount("B")
Extra = 0
baseSpeed = 22
targetAngle = 90  'as the startAngle is still -90 deg
count = 0
diffRotation = Motor.GetCount("B") - startRotation - Extra
While diffRotation < 30 'gForward until reaches the first box
  gForward()
  diffRotation = Motor.GetCount("B") - startRotation - Extra
EndWhile
Motor.Stop("BC","True")
Program.Delay(500)
chemPos = 0
dispenseNow = 2

readCol_right() 'detect what's there

If colDetected = "white" Then
  markBlue = 1
EndIf

If dispenseNow = 1 Then 'if previous water needs to be dropped
  targetAngle = 90
  While diffRotation < 555 'gForward until reaches the second box but NO NEED SCAN
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
  Program.Delay(500)
  dispenseWater() 'drop the previous water
EndIf

If colDetected = "none" Then 'if nothing was detected
  targetAngle = 90
  While diffRotation < 555 'gForward until reaches the second box TO SCAN
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
  Program.Delay(500)
  chemPos = 0
  dispenseNow = 1
  readCol_right() 'detect what's there
  If colDetected = "white" Then 
    markBlue = 1
  EndIf
EndIf

targetAngle = 90
While diffRotation < 715 'gForward until reaches the third box
  gForward()
  diffRotation = Motor.GetCount("B") - startRotation - Extra
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1,1,1,2,diffRotation)
  LCD.Update()
EndWhile
Motor.Stop("BC","True")
Program.Delay(500)
chemPos = 0
dispenseNow = 2 'dispense later
readCol_right() 'detect what's there
LCD.Text(1,0,21,2,colDetected) 'display what's on box 3

If colDetected = "white" Then
  markGreen = 1
EndIf

If dispenseNow = 1 Then 'if previous water needs to be dropped
  targetAngle = 90
  While diffRotation < 1226 'gForward until reaches the fourth box TO DROP WATER
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
  Program.Delay(500)
  dispenseWater() 'dispense previous water
EndIf

If colDetected = "none" Then 'if nothing is detected
  targetAngle = 90
  While diffRotation < 1226 'gForward until reaches the fourth box
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
  Program.Delay(500)
  chemPos = 0
  dispenseNow = 1
  readCol_right() 'detect what's there
  LCD.Text(1,0,21,2,colDetected) 'display what's on box 4
  If colDetected = "white" Then 
    markGreen = 1
  EndIf
  Program.Delay(1000)
Else 
  While diffRotation < 1226 'gForward until reaches the fourth box BUT DONT SCAN
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
EndIf

Motor.StartSync("BC",10,10) 'align to wall
Program.Delay(1000)
Motor.Stop("BC","True")
Motor.MoveSync("BC",-20,-20,40,"True") 'reverse
Motor.Stop("BC","True")
Program.Delay(500)
targetangle = -90
Lencdturn()
Motor.Stop("BC","True")
Motor.Start("BC",-10) 'wall bang
Program.Delay(1000) 'pause
Motor.Stop("BC","True") 'stop

startRotation = Motor.GetCount("B")
Extra = 0
baseSpeed = 20
startAngle = Sensor.ReadRawValue(3,0) 'startAngle = gyro value
targetAngle = 0
count = 0
diffRotation = Motor.GetCount("B") - startRotation - Extra

While diffRotation < 370 'gForward until reaches the fifth box
  gForward()
  diffRotation = Motor.GetCount("B") - startRotation - Extra
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1,1,1,2,diffRotation)
  LCD.Update()
EndWhile
Motor.Stop("BC","True")
Program.Delay(500)
chemPos = 0
dispenseNow = 2
readCol_right() 'detect what's there
LCD.Text(1,0,21,2,colDetected) 'display what's on box 5
scanYellow = colDetected

If colDetected = "white" Then 
  markYellow = 1
EndIf


While diffRotation < 905 'gForward until reaches the sixth box
  gForward()
  diffRotation = Motor.GetCount("B") - startRotation - Extra
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1,1,1,2,diffRotation)
  LCD.Update()
EndWhile
Motor.Stop("BC","True")
Program.Delay(500)
dispenseWater() 'dispense previous water if needed
chemPos = 0
dispenseNow = 2
readCol_right() 'detect what's there
LCD.Text(1,0,21,2,colDetected) 'display what's on box 6

If colDetected = "white" Then
  markRed = 1
EndIf

If dispenseNow = 1 Then 'if previous water needs to be dispensed
  While diffRotation < 1295 'gForward until reaches the seventh box
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Text(1,1,1,2,diffRotation)
    LCD.Update()
  EndWhile
  Motor.Stop("BC","True")
  Program.Delay(500)
  dispenseWater()
EndIf

If colDetected = "none" Then 'if nothing is detected
  While diffRotation < 1295 'gForward until reaches the seventh box
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Text(1,1,1,2,diffRotation)
    LCD.Update()
  EndWhile
  Motor.Stop("BC","True")
  Program.Delay(500)
  chemPos = 0
  dispenseNow = 1
  readCol_right() 'detect what's there
  LCD.Text(1,0,21,2,colDetected) 'display what's on box 7
  Program.Delay(1000)
  If colDetected = "white" Then 
    markRed = 1
  EndIf
Else
  While diffRotation < 1295 'gForward until reaches the seventh box BUT DONT SCAN
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
EndIf

Motor.StartSync("BC",10,10) 'align to wall
Program.Delay(1000)
Motor.Stop("BC","True")
Motor.MoveSync("BC",-20,-20,30,"True") 'reverse
Motor.Stop("BC","True")
Program.Delay(500)
targetangle = -90
Lencdturn()
Motor.Stop("BC","True")
Motor.Start("BC",-10) 'wall bang
Program.Delay(1000) 'pause
Motor.Stop("BC","True") 'stop

startRotation = Motor.GetCount("B")
Extra = 0
baseSpeed = 20
startAngle = Sensor.ReadRawValue(3,0) 'startAngle = gyro value
targetAngle = 1
count = 0
diffRotation = Motor.GetCount("B") - startRotation

While diffRotation < 480 'gForward until reaches the eighth box
  gForward()
  diffRotation = Motor.GetCount("B") - startRotation - Extra
EndWhile
Motor.Stop("BC","True")
chemPos = 1
dispenseNow = 2
readCol_left() 'detect what's there
LCD.Text(1,0,21,2,colDetected) 'display what's on box 8
Program.Delay(1000)

If colDetected = "white" Then
  markBrown = 1
EndIf

targetAngle = 1
While diffRotation < 1010 'gForward until reaches the nineth box
  gForward()
  diffRotation = Motor.GetCount("B") - startRotation - Extra
EndWhile
Motor.Stop("BC","True")
dispenseWater() 'if previous water needs to be dispensed
chemPos = 1
dispenseNow = 1
readCol_left() 'detect what's there
LCD.Text(1,0,21,2,colDetected) 'display what's on box 9
Program.Delay(1000)
If colDetected = "white" Then 
  markBrown = 1
EndIf

targetAngle = 0
Pturn()
Program.Delay(200)
Motor.MoveSync("BC",-20,-20,350,"True") 'reverse
Motor.Stop("BC","True")
Program.Delay(500)
targetangle = -90
' Motor.MoveSync("BC",-20,20,220,"False") 'turn
Rencdturn()
Motor.Stop("BC","True")
Motor.Start("BC",-10) 'wall bang
Program.Delay(2000) 'pause
Motor.Stop("BC","True") 'stop

startRotation = Motor.GetCount("B")
Extra = 0
baseSpeed = 20
startAngle = Sensor.ReadRawValue(3,0) 'startAngle = gyro value
targetAngle = 0
count = 0
diffRotation = Motor.GetCount("B") - startRotation

' Program.Delay(1000)
While diffRotation < 810 'gForward until ready to turn
  gForward()
  diffRotation = Motor.GetCount("B") - startRotation - Extra
EndWhile
Motor.Stop("BC","True")

Program.Delay(500)
targetangle = 100
Rencdturn()

startRotation = Motor.GetCount("B")
Extra = 0
baseSpeed = 20
startAngle = Sensor.ReadRawValue(3,0) 'startAngle = gyro value
targetAngle = 0
count = 0
diffRotation = Motor.GetCount("B") - startRotation - Extra

If scanYellow = "none" Then 'if nothing was detected in yellow1
  baseSpeed = -20
  While diffRotation > -320 'reverse gForward until reaches the twelveth box
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
  chemPos = 0
  dispenseNow = 1
  readCol_right() 'detect what's there
  Program.Delay(1000)
  If colDetected = "white" Then
    markYellow = 1
  EndIf

  baseSpeed = 20
  While diffRotation < -170 'gForward until reaches the twelveth box
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
  chemPos = 0
  dispenseNow = 2
  readCol_right() 'detect what's there
  Program.Delay(1000)
  If colDetected = "white" Then
    markWhite = 1
  EndIf

Else

  baseSpeed = -20
  While diffRotation > -170 'reverse gForward until reaches the twelveth box
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
  EndWhile
  Motor.Stop("BC","True")
  chemPos = 0
  dispenseNow = 2
  readCol_right() 'detect what's there
  Program.Delay(1000)  
  If colDetected = "white" Then 
    markWhite = 1
  EndIf
EndIf

If dispenseNow = 1 Then
  baseSpeed = 20
  While diffRotation < 350 'gForward until reaches the thirteenth box
      gForward()
      diffRotation = Motor.GetCount("B") - startRotation - Extra
    EndWhile
    Motor.Stop("BC","True")
    dispenseWater()
EndIf

If colDetected = "none" Then 'if nothing is detected
  baseSpeed = 20
  If colDetected = "none" Then 'if nothing is detected
    While diffRotation < 350 'gForward until reaches the thirteenth box
      gForward()
      diffRotation = Motor.GetCount("B") - startRotation - Extra
    EndWhile
    Motor.Stop("BC","True")
    chemPos = 0
    dispenseNow = 1
    readCol_right() 'detect what's there
    LCD.Text(1,0,21,2,colDetected) 'display what's on box 13
    Program.Delay(1000)
    If colDetected = "white" Then
      markWhite = 1
    EndIf
  EndIf
EndIf

baseSpeed = 90
  While diffRotation <  1170 'gForward until reaches the safe zone
    gForward()
    diffRotation = Motor.GetCount("B") - startRotation - Extra
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Text(1,1,1,2,diffRotation)
    LCD.Update()
  EndWhile

targetangle = -90
Lencdturn()


Program.Delay(1000)
Motor.StartSync("BC",-50,-50) 'wall bang
Program.Delay(3000)
Motor.Stop("BC","True")
Program.Delay(1000)

startAngle = Sensor.ReadRawValue(3,0) 'startAngle = gyro value
Motor.MoveSync("BC",20,20,30,"True")
targetangle = -90
encdturn()
Program.Delay(1000)

startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value
targetAngle = 0
Motor.StartSync("BC",-100,-100)
Program.Delay(4000)
Motor.Stop("BC","True")


startRotation = Motor.GetCount("B")
baseSpeed = 20

Motor.MoveSync("BC",20,20,155,"True")

startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value
targetAngle = 88
LpTurn()
Motor.Stop("BC","True")

Motor.StartSync("BC",-20,-20) 'wall bang
Program.Delay(1000)
Motor.Stop("BC","True")
startAngle = Sensor.ReadRawValue(3,0) 'start angle = gyro value

Motor.MoveSync("BC",20,20,340,"True")
Motor.Move("A",40,135,"True") 'grab block 1

Motor.MoveSync("BC",20,20,390,"True")
Motor.Stop("BC","True")
Program.Delay(500)


Motor.Start("A",1) 'grab block 2
Motor.Move("BC",5,30,100)

Program.Delay(1000)
Motor.Stop("A", "True")


If markBrown = 1 Then
    Motor.MoveSync("BC",20,0,800,"True")
    Motor.Stop("A","True")
    Motor.MoveSync("BC",20,20,150,"True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC",-20,-20,150,"True")
    Motor.MoveSync("BC",-20,0,800,"True")
    markBrown = 0
ElseIf markWhite = 1 Then 
  Motor.MoveSync("BC",20,0,670,"True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC",-20,0,670,"True")
    markWhite = 0
ElseIf markBlue = 1 Then
    Motor.MoveSync("BC",20,0,520,"True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC",-20,0,520,"True")
    markBlue = 0
ElseIf markGreen = 1 Then 
    Motor.MoveSync("BC", -20, -20, 100, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,20,"True") 'release marking block
    Motor.MoveSync("BC", -20, 0, 260, "True") 
    Motor.MoveSync("BC", 20, 20, 100, "True")   
    markGreen = 0
ElseIf markYellow = 1 Then 
    Motor.MoveSync("BC", -20, -20, 300, "True")   
    Motor.MoveSync("BC", 20, 0, 240, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,20,"True")
    Motor.MoveSync("BC", -20, 0, 240, "True") 
    Motor.MoveSync("BC", 20, 20, 300, "True")   
    markYellow = 0
EndIf

If markBlue = 1 Then
    Motor.MoveSync("BC",20,0,550,"True")
    Motor.MoveSync("BC", 10, 10, 50, "True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC", -10, -10, 50, "True")
    Motor.MoveSync("BC",-20,0,550,"True")
    markBlue = 0
ElseIf markRed = 1 Then
    Motor.MoveSync("BC", -20, -20, 500, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,130,"True")
    Motor.MoveSync("BC", -20, 0, 260, "True") 
    markRed = 0
ElseIf markWhite = 1 Then 
    Motor.MoveSync("BC",20,0,800,"True")
    Motor.Stop("A","True")
    Motor.MoveSync("BC",20,20,150,"True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC",-20,-20,150,"True")
    Motor.MoveSync("BC",-20,0,800,"True")
    markBrown = 0
ElseIf markBrown = 1 Then
    Motor.MoveSync("BC",20,0,670,"True")
    Motor.Stop("A","True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC",-20,0,670,"True")
    markWhite = 0
ElseIf markGreen = 1 Then 
    Motor.MoveSync("BC", -20, -20, 100, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,130,"True") 'release marking block
    Motor.MoveSync("BC", -20, 0, 260, "True")   
    markGreen = 0
ElseIf markYellow = 1 Then 
    Motor.MoveSync("BC", -20, -20, 300, "True")   
    Motor.MoveSync("BC", 20, 0, 260, "True") 
    Motor.Stop("A", "True")
    Motor.Move("A",-40,130,"True")
    Motor.MoveSync("BC", -20, 0, 260, "True")   
    markYellow = 0

EndIf

Motor.StartSync("BC",-25,-25) 'wall bang
Program.Delay(2000)
Motor.Stop("BC","True")

Motor.MoveSync("BC",50,50,100,"True") 'move out a bit

Motor.Start("A", -5)

targetangle = 125
encdturn()
Motor.StartSync("BC",40,40)
Program.Delay(2000)
Motor.Stop("BC","True")
Motor.MoveSync("BC", -10, -10, 30, "True")